name: Push to DockerHub

on:
  push:
    tags:
      - v*

jobs:
  push:
    runs-on: ubuntu-latest
    environment: alerta-release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set variables
        id: vars
        run: |
          echo "SHORT_COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: Set image tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ vars.REPOSITORY_URL }}/${{ vars.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.vars.outputs.VERSION }}
            type=raw,value=${{ steps.vars.outputs.SHORT_COMMIT_ID }}
      - run: npm i octokit @octokit/core
      - name: Generate one-time token for publishing the image
        uses: actions/github-script@v6
        id: token
        env: 
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
        with:
          result-encoding: string
          script: |
            const generateToken = require('.github/scripts/token.js')
            // organization_package: "write" - https://github.com/orgs/community/discussions/32195
            // https://github.com/ljubon/docker-alerta/actions/runs/3991432330/jobs/6846219820#step:8:2195
            const tokenPermissions = { 
              packages: "write",
              contents: "write",
              deployments: "write",
            } 
            try {
              return await generateToken({ core }, 'ljubon', '["docker-alerta","alerta-release"]', tokenPermissions )
            } catch (error) {
              core.notice(`Permission: ${JSON.stringify(tokenPermissions)}`)
              return core.setFailed(`Unable to publish release to ${{ vars.REPOSITORY_URL }}/${{ vars.IMAGE_NAME }}, please check token permissions.\n${error}`)
            }
      - name: 'Login to GitHub Container Registry'
        run: |
          echo ${{ steps.token.outputs.result }} | docker login ghcr.io -u ljubon --password-stdin
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ vars.REPOSITORY_URL }}
      #     username: ${{ vars.GH_APP_OWNER }} # ${{ github.actor }}
      #     password: ${{ steps.token.outputs.result }}
      - name: Build & Push Image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            VCS_REF=${{ steps.vars.outputs.SHORT_COMMIT_ID }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
            VERSION=${{ steps.vars.outputs.VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.result }}
      - uses: act10ns/slack@v1
        if: always()
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}